{
  "name": "tower",
  "version": "0.4.2-22",
  "description": "Full Stack Web Framework for Node.js and the Browser",
  "homepage": "http://viatropos.github.com/tower",
  "main": "./index.js",
  "author": {
    "name": "Lance Pollard",
    "email": "lancejpollard@gmail.com"
  },
  "keywords": [
    "mvc",
    "web-framework",
    "ruby-on-rails",
    "express",
    "tower",
    "framework",
    "rails",
    "node"
  ],
  "maintainers": [
    {
      "name": "Lance Pollard",
      "email": "lancejpollard@gmail.com",
      "url": "http://lancepollard.com"
    }
  ],
  "contributors": [
    {
      "name": "Lance Pollard",
      "email": "lancejpollard@gmail.com"
    },
    {
      "name": "edubkendo"
    },
    {
      "name": "TheHydroImpulse",
      "email": "dnfagnan@gmail.com"
    },
    {
      "name": "Sebastian Hoitz"
    },
    {
      "name": "scottkf",
      "email": "scott@tesoriere.com"
    },
    {
      "name": "Jai-gouk Kim"
    },
    {
      "name": "Dave Myron"
    },
    {
      "name": "Vyacheslav Voronchuk"
    },
    {
      "name": "j-mcnally"
    },
    {
      "name": "abovethewater"
    },
    {
      "name": "Nov Matake"
    },
    {
      "name": "Kristian Mandrup",
      "email": "kmandrup@gmail.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://mths.be/mit"
    }
  ],
  "bugs": {
    "url": "https://github.com/viatropos/tower/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/viatropos/tower.git"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "bin": {
    "tower": "./bin/tower"
  },
  "dependencies": {
    "underscore": ">= 1.4.2",
    "underscore.string": ">= 2.x",
    "inflection": ">= 1.2.3",
    "commander": ">= 1.0.5",
    "mime": ">= 1.2.4",
    "node-uuid": ">= 1.3.0",
    "ejs": ">= 0.6.1",
    "async": ">= 0.1.12",
    "mint": ">= 0.3.4",
    "qs": ">= 0.3.1",
    "moment": ">= 1.7.0",
    "geolib": ">= 1.1.8",
    "validator": ">= 0.4.5",
    "accounting": ">= 0.3.2",
    "ember-metal-node": ">= 1.0.0-pre.2",
    "ember-runtime-node": ">= 1.0.0-pre.2",
    "ember-states-node": ">= 1.0.0-pre.2",
    "ember-application-node": ">= 1.0.0-pre.2",
    "ember-routing-node": ">= 1.0.0-pre.2",
    "useragent": ">= 1.0.5",
    "connect": ">= 2.4.6",
    "fresh": ">= 0.1.0",
    "express": "3.x",
    "URIjs": "~1.7.2",
    "which": "~1.0.5",
    "superagent": "~0.9.5",
    "crc": "~0.2.0",
    "ansi": "~0.1.2",
    "term-css": "~1.0.0",
    "wrench": "~1.3.9",
    "gm": "~1.4.1",
    "temp": "~0.4.0",
    "grunt-contrib-less": "~0.3.0"
  },
  "devDependencies": {},
  "testDependencies": {
    "coffee-script": "~1.3.3",
    "stylus": ">= 0.29.0",
    "uglify-js": ">= 1.1.1",
    "mocha": ">= 1.5.0",
    "chai": ">= 0.3.3",
    "sinon": ">= 1.3.1",
    "eco": ">= 0.1.0",
    "mustache": ">= 0.4.0",
    "jade": ">= 0.22.0",
    "kue": ">= 0.3.4",
    "mongodb": ">= 1.1.10",
    "coffeecup": ">= 0.3.17",
    "gzip": ">= 0.1.0",
    "chokidar": "~0.4.0",
    "knox": "0.0.11",
    "socket.io": ">= 0.9.10",
    "socket.io-client": ">= 0.9.10",
    "fibers": "~0.6.8",
    "cli-table": "0.0.2",
    "ttys": "0.0.3",
    "cheerio": ">= 0.10.0",
    "Faker": ">= 0.1.3",
    "colors": "~0.6.0-1"
  },
  "globalDependencies": {},
  "localDependencies": {},
  "scripts": {
    "test": "make test",
    "start": "grunt start --config ./grunt.coffee",
    "docs": "make docs"
  },
  "readme": "# Tower.js <img src=\"http://cloud.github.com/downloads/viatropos/tower/tower.png\"/>\n\n> Full Stack Web Framework for Node.js and the Browser.\n\nBuilt on top of Node's Connect and Express, modeled after Ruby on Rails.  Built for the client and server from the ground up.\n\n[![Build Status](https://secure.travis-ci.org/viatropos/tower.png)](http://travis-ci.org/viatropos/tower)\n\nFollow me [@viatropos](http://twitter.com/viatropos).\n\n- **IRC**: #towerjs on irc.freenode.net\n- **Issues**: https://github.com/viatropos/tower/issues\n- **Ask a question**: http://stackoverflow.com/questions/tagged/towerjs\n- **Roadmap**: https://github.com/viatropos/tower/blob/master/ROADMAP.md\n- **Latest Docs**: https://github.com/viatropos/tower/wiki\n\nNote, Tower is still very early alpha. Check out the [roadmap](https://github.com/viatropos/tower/blob/master/ROADMAP.md) to see where we're going. If you're up for it please contribute! The 0.5.0 release will have most of the features and will be roughly equivalent to a beta release. From there, it's performance optimization, workflow streamlining, and creating some awesome examples. 1.0 will be a plug-and-chug real-time app framework.\n\nMaster branch will always be functional, and for the most part in sync with the version installed through the npm registry.\n\n## Default Development Stack\n\n- Ember\n- jQuery\n- Handlebars (templating)\n- Stylus (LESS is also supported)\n- MongoDB (database, it's optional. Tower can just be used in the browser)\n- Redis (background jobs, also optional)\n- Mocha (tests)\n- CoffeeScript\n- Twitter Bootstrap\n\nIncludes a database-agnostic ORM with browser (memory and ajax) and MongoDB support, modeled after ActiveRecord and Mongoid for Ruby. Includes a controller architecture that works the same on both the client and server, modeled after Rails.  The routing API is pretty much exactly like Rails 3's.  Templates work on client and server as well (and you can swap in any template engine no problem).  Includes asset pipeline that works just like Rails 3's - minifies and gzips assets with an md5-hashed name for optimal browser caching, only if you so desire.  And it includes a watcher that automatically injects javascripts and stylesheets into the browser as you develop.  It solves a lot of our problems, hope it solves yours too.\n\n## Install\n\n```\nnpm install tower -g\n```\n\nYou will also need [grunt](https://github.com/cowboy/grunt), an awesome build tool, and coffee-script:\n\n```\nnpm install grunt -g\nnpm install coffee-script -g\n```\n\nFinally, make sure you have mongodb installed and running:\n\n```\nbrew install mongodb\nmongod # starts server\n```\n\nIf you would like to try out the background-worker code, you can also install and start redis:\n\n```\nbrew install redis\nredis-server\n```\n\n## Generate\n\nIn one terminal window, generate your app and start your server:\n\n```\ntower new app\ncd app\nnpm install\ntower generate scaffold Post title:string body:text\ntower generate scaffold User firstName:string lastName:string email:string\nnode server\n```\n\nThen in a second terminal window, start the watcher so files compile when they are changed:\n\n```\ncd app\ncake watch\n```\n\nBy having two separate windows, you can modify your code without having to run your server, and coffeescript/stylus/less tasks (or any task in your `grunt` file) will still be executed.\n\nAlso note, grunt's watcher doesn't currently get notified when new files are created. So if you run the `tower generate` command, or otherwise create files, stop and rerun the `cake watch` command. You also might want to check out `grunt-contrib-watch` which was recently created and may solve this issue (I haven't tried it yet though).\n\nIf you run into an error during `npm install`, remove the `node_modules` folder and try again.\n\nTo restart your server automatically if it crashes, run with forever:\n\n```\nnpm install forever -g\nforever server.js\n```\n\n## Application\n\n``` coffeescript\n# app/config/shared/application.coffee\nglobal.App = Tower.Application.create()\n```\n\n## Models\n\n``` coffeescript\n# app/models/shared/user.coffee\nclass App.User extends Tower.Model\n  @field 'firstName', required: true\n  @field 'lastName'\n  @field 'email', format: /\\w+@\\w+.com/\n  @field 'activatedAt', type: 'Date', default: -> new Date()\n  \n  @hasOne 'address', embed: true\n  \n  @hasMany 'posts'\n  @hasMany 'comments'\n  \n  @scope 'recent', -> createdAt: '>=': -> _(3).days().ago().toDate()\n  \n  @validates 'firstName', 'email', presence: true\n  \n  @after 'create', 'welcome'\n  \n  welcome: ->\n    Tower.Mailer.welcome(@).deliver()\n```\n\n``` coffeescript\n# app/models/shared/post.coffee\nclass App.Post extends Tower.Model\n  @field 'title'\n  @field 'body'\n  @field 'tags', type: ['String'], default: []\n  @field 'slug'\n  \n  @belongsTo 'author', type: 'User'\n  \n  @hasMany 'comments', as: 'commentable'\n  @hasMany 'commenters', through: 'comments', type: 'User'\n  \n  @before 'validate', 'slugify'\n  \n  slugify: ->\n    @set 'slug', @get('title').replace(/[^a-z0-9]+/g, '-').toLowerCase()\n```\n\n``` coffeescript\n# app/models/shared/comment.coffee\nclass App.Comment extends Tower.Model\n  @field 'message'\n  \n  @belongsTo 'author', type: 'User'\n  @belongsTo 'commentable', polymorphic: true\n```\n\n``` coffeescript\n# app/models/shared/address.coffee\nclass App.Address extends Tower.Model\n  @field 'street'\n  @field 'city'\n  @field 'state'\n  @field 'zip'\n  @field 'coordinates', type: 'Geo'\n  \n  @belongsTo 'user', embed: true\n```\n\n### Chainable Scopes, Queries, and Pagination\n\n``` coffeescript\nApp.User\n  .where(createdAt: '>=': _(2).days().ago(), '<=': new Date())\n  .desc('createdAt')\n  .asc('firstName')\n  .paginate(page: 5)\n  .all()\n```\n\n### Associations\n\n``` coffeescript\nuser  = App.User.first()\n\n# hasMany 'posts'\nposts = user.get('posts').where(title: 'First Post').first()\npost  = user.get('posts').build(title: 'A Post!')\npost  = user.get('posts').create(title: 'A Saved Post!')\nposts = user.get('posts').all()\n\npost  = App.Post.first()\n\n# belongsTo 'author'\nuser  = post.get('author')\n```\n\n### Validations\n\n``` coffeescript\nuser = App.User.build()\nuser.save()         #=> false\nuser.get('errors')  #=> {\"email\": [\"Email must be present\"]}\nuser.set('email', 'me@gmail.com')\nuser.save()         #=> true\nuser.get('errors')  #=> {}\n```\n\n## Routes\n\n``` coffeescript\n# config/routes.coffee\nApp.routes ->\n  @match '/login', 'sessions#new', via: 'get', as: 'login'\n  @match '/logout', 'sessions#destroy', via: 'get', as: 'logout'\n  \n  @resources 'posts', ->\n    @resources 'comments'\n    \n  @namespace 'admin', ->\n    @resources 'users'\n    @resources 'posts', ->\n      @resources 'comments'\n      \n  @constraints subdomain: /^api$/, ->\n    @resources 'posts', ->\n      @resources 'comments'\n      \n  @match '(/*path)', to: 'application#index', via: 'get'\n```\n\n## Controllers\n\n``` coffeescript\n# app/controllers/server/postsController.coffee\nclass App.PostsController extends Tower.Controller\n  index: ->\n    App.Post.all (error, posts) =>\n      @render 'index', locals: posts: posts\n    \n  new: ->\n    @post = App.Post.build()\n    @render 'new'\n    \n  create: ->\n    @post = App.Post.build(@params.post)\n    \n    super (success, failure) ->\n      @success.html => @render 'posts/edit'\n      @success.json => @render text: 'success!'\n      @failure.html => @render text: 'Error', status: 404\n      @failure.json => @render text: 'Error', status: 404\n    \n  show: ->\n    App.Post.find @params.id, (error, post) =>\n      @render 'show'\n    \n  edit: ->\n    App.Post.find @params.id, (error, post) =>\n      @render 'edit'\n    \n  update: ->\n    App.Post.find @params.id, (error, post) =>\n      post.updateAttributes @params.post, (error) =>\n        @redirectTo action: 'show'\n    \n  destroy: ->\n    App.Post.find @params.id, (error, post) =>\n      post.destroy (error) =>\n        @redirectTo action: 'index'\n```\n\n## Views\n\nViews are all Ember.\n\n## Templates\n\nTemplates adhere to the [Twitter Bootstrap 2.x](http://twitter.github.com/bootstrap/) markup conventions.\n\nThe default templating engine is [CoffeeCup](http://easydoc.org/coffeecup), which is pure CoffeeScript.  It's much more powerful than Jade, and it's just as performant if not more so.  You can set Jade or any other templating engine as the default by setting `Tower.View.engine = \"jade\"` in `config/application`.  Tower uses [Mint.js](http://github.com/viatropos/mint.js), which is a normalized interface to most of the Node.js templating languages.\n\n## Styles\n\nIt's all using Twitter Bootstrap, so check out their docs.  http://twitter.github.com/bootstrap/\n\nActually, all that's built in!  So for the simple case you don't even need to write anything in your controllers (skinny controllers, fat models).  The default implementation is actually a lot more robust than that, just wanted to show a simple example.\n\n## Databases\n\n``` coffeescript\n# app/config/server/databases.coffee\nmodule.exports =\n  mongodb:\n    development:\n      name: 'app-development'\n      port: 27017\n      host: '127.0.0.1'\n    test:\n      name: 'app-test'\n      port: 27017\n      host: '127.0.0.1'\n    staging:\n      name: 'app-staging'\n      port: 27017\n      host: '127.0.0.1'\n    production:\n      name: 'app-production'\n      port: 27017\n      host: '127.0.0.1'\n```\n\n## Mailers\n\n``` coffeescript\nclass App.Notification extends Tower.Mailer\n  # app/views/mailers/welcome.coffee template\n  @welcome: (user) ->\n    @mail to: user.email, from: 'me@gmail.com'\n```\n\n## Internationalization\n\n``` coffeescript\n# app/config/shared/locales/en.coffee\nmodule.exports =\n  hello: 'world'\n  forms:\n    titles:\n      signup: 'Signup'\n  pages:\n    titles:\n      home: 'Welcome to %{site}'\n  posts:\n    comments:\n      none: 'No comments'\n      one: '1 comment'\n      other: '%{count} comments'\n  messages:\n    past:\n      none: 'You never had any messages'\n      one: 'You had 1 message'\n      other: 'You had %{count} messages'\n    present:\n      one: 'You have 1 message'\n    future:\n      one: 'You might have 1 message'\n```\n\n## Helpers\n\nSince all of the controller/routing code is available on the client, you can go directly through that system just like you would the server.\n\n``` coffeescript\n# Just request the url, and let it do it's thing\nTower.get '/posts'\n\n# Same thing, this time passing parameters\nTower.get '/posts', createdAt: \"2011-10-26..2011-10-31\"\n\n# Dynamic\nTower.urlFor(Post.first()) #=> \"/posts/the-id\"\n```\n\nThose methods pass through the router and client-side middleware so you have access to `request` and `response` objects like you would on the server.\n\n## Middleware\n\nIt's built on [connect](http://github.com/sencha/connect), so you can use any of the middleware libs out there.\n\n## Assets\n\n``` coffeescript\n# app/config/server/assets.coffee\nmodule.exports =\n  javascripts:\n    vendor: [\n      '/vendor/javascripts/jquery.js'\n      '/vendor/javascripts/underscore.js'\n      '/vendor/javascripts/socket.io'\n      '/vendor/javascripts/tower.js'\n    ]\n    \n    lib: [\n      '/lib/grid.js'\n      '/lib/profiler.js'\n    ]\n    \n    application: [\n      '/app/models/shared/post.js'\n      '/app/models/shared/comment.js'\n    ]\n    \n  stylesheets:\n    vendor: [\n      '/vendor/stylesheets/reset.css'\n    ]\n    application: [\n      '/app/assets/stylesheets/application.css'\n      '/app/assets/stylesheets/theme.css'\n    ]\n```\n\n## Structure\n\nHere's the structure of a newly generated app with a `Post` model:\n\n```\n.\n├── app\n│   ├── config\n│   │   ├── client\n│   │   │   ├── bootstrap.coffee\n│   │   │   └── watch.coffee\n│   │   ├── server\n│   │   │   ├── environments\n│   │   │   │   ├── development.coffee\n│   │   │   │   ├── production.coffee\n│   │   │   │   └── test.coffee\n│   │   │   ├── initializers\n│   │   │   ├── assets.coffee\n│   │   │   ├── bootstrap.coffee\n│   │   │   ├── credentials.coffee\n│   │   │   ├── databases.coffee\n│   │   │   └── session.coffee\n│   │   └── shared\n│   │       ├── locales\n│   │       │   └── en.coffee\n│   │       ├── application.coffee\n│   │       └── routes.coffee\n│   ├── controllers\n│   │   ├── client\n│   │   │   ├── applicationController.coffee\n│   │   │   └── postsController.coffee\n│   │   └── server\n│   │       ├── applicationController.coffee\n│   │       └── postsController.coffee\n│   ├── models\n│   │   ├── client\n│   │   ├── server\n│   │   └── shared\n│   │       └── post.coffee\n│   ├── stylesheets\n│   │   ├── client\n│   │   │   └── application.styl\n│   │   └── server\n│   │       └── email.styl\n│   ├── templates\n│   │   ├── server\n│   │   │   └── layout\n│   │   │       ├── _meta.coffee\n│   │   │       └── application.coffee\n│   │   └── shared\n│   │       ├── layout\n│   │       │   ├── _body.coffee\n│   │       │   ├── _flash.coffee\n│   │       │   ├── _footer.coffee\n│   │       │   ├── _header.coffee\n│   │       │   ├── _navigation.coffee\n│   │       │   └── _sidebar.coffee\n│   │       ├── posts\n│   │       │   ├── _flash.coffee\n│   │       │   ├── _form.coffee\n│   │       │   ├── _item.coffee\n│   │       │   ├── _list.coffee\n│   │       │   ├── _table.coffee\n│   │       │   ├── edit.coffee\n│   │       │   ├── index.coffee\n│   │       │   ├── new.coffee\n│   │       │   └── show.coffee\n│   │       └── welcome.coffee\n│   └── views\n│       └── client\n│           ├── layout\n│           │   └── application.coffee\n│           └── posts\n│               ├── form.coffee\n│               ├── index.coffee\n│               └── show.coffee\n├── data\n│   └── seeds.coffee\n├── lib\n├── log\n├── public\n│   ├── fonts\n│   ├── images\n│   ├── javascripts\n│   ├── stylesheets\n│   ├── swfs\n│   ├── uploads\n│   ├── 404.html\n│   ├── 500.html\n│   ├── favicon.ico\n│   ├── humans.txt\n│   └── robots.txt\n├── scripts\n│   └── tower\n├── test\n│   ├── cases\n│   │   ├── controllers\n│   │   │   ├── client\n│   │   │   └── server\n│   │           └── postsControllerTest.coffee\n│   │   ├── features\n│   │   │   └── client\n│   │   └── models\n│   │       ├── client\n│   │       ├── server\n│   │       └── shared\n│   │           └── postTest.coffee\n│   ├── factories\n│   │   └── postFactory.coffee\n│   ├── client.coffee\n│   ├── mocha.opts\n│   └── server.coffee\n├── tmp\n├── wiki\n│   ├── _sidebar.md\n│   └── home.md\n├── Cakefile\n├── grunt.coffee\n├── package.json\n├── Procfile\n├── README.md\n└── server.js\n```\n\n\nAll assets are read from `/public`, which is the compiled output of everything in `/app`, `/lib`, `/vendor`, and wherever else you might put things.  The default is to use stylus for css in `/app/assets/stylesheets`.\n\nBy having this `assets.coffee` file, you can specify exactly how you want to compile your files for the client so it's as optimized and cacheable as possible in production.\n\n### Minify and Gzip\n\n``` bash\ncake assets:bundle\n```\n\n### Push to S3\n\n``` bash\ncake assets:publish\n```\n\n## Test\n\n``` bash\nnpm test\n```\n\nRun individual test file:\n\n``` bash\nmocha $(find test -name \"*persistenceTest.coffee\")\n```\n\nRun test matching pattern:\n\n``` bash\nmocha $(find test -name \"*persistenceTest.coffee\") -g \"string property$\"\n```\n\nRun tests matching directory and pattern:\n\n``` bash\nmocha $(find test -name \"*Test.coffee\" | egrep \"/*view*/\")\n```\n\n[Run tests *not* matching directory and pattern](http://stackoverflow.com/a/12255734/169992):\n\n``` bash\n# run all tests except for client tests\nmocha $(find test -name client -prune -o -name '*Test.coffee' -print)\n```\n\n## Examples\n\n- [Facebook/Twitter Authentication (Passport)](https://github.com/viatropos/tower-authentication-example)\n- [towerjs.org (project site)](https://github.com/viatropos/towerjs.org)\n\n## Contributing to Tower\n\n```\ngit clone https://github.com/viatropos/tower.git\ncd tower\nnpm install\nmake install-dependencies\n```\n\n### Building Tower\n\nYou can build Tower manually with:\n\n```\nmake\n```\n\nOr you can have it recompile the files when you change them:\n\n```\nmake watch\n```\n\n### \"Linking\" Tower\n\nYou can symlink your local tower repo to your global npm node_modules directory, which makes it so you can use it in your apps (so if you make changes to the tower repo, you'll see them in your app). Very useful.\n\nIn the tower repo:\n\n```\nnpm link\n```\n\nIn a tower app:\n\n```\nnpm link tower\n```\n\nIf you want to try installing tower from the remote npm registry, you can just unlink it and run `npm install`:\n\n```\nnpm unlink tower\nnpm install tower\n```\n\nUsing `npm link` makes it very easy to mess with the source.\n\n### Running Tests\n\nIn the tower repo, run server tests with:\n\n```\nmake test-server\n```\n\nTo run client tests, first compile the test app and start its server:\n\n```\nmake build-test-client\nmake start-test-client\n```\n\nThen run the tests (uses phantomjs)\n\n```\nmake test-client\n```\n\nIf you don't have phantomjs you can install it with:\n\n```\nbrew install phantomjs\n```\n\n## License\n\n(The MIT License)\n\nCopyright &copy; 2012 [Lance Pollard](http://twitter.com/viatropos) &lt;lancejpollard@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "tower@0.4.2-22",
  "_from": "tower@>= 0.4.2"
}
